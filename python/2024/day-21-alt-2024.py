from functools import cache

# file_path = '/home/tom/projects/advent-of-code/resources/input/2024/day21/input_story.txt'
file_path = '/home/tom/projects/advent-of-code/resources/input/2024/day21/input.txt'

numpad  = {
    '7': (0, 0), '8': (0, 1), '9': (0, 2),
    '4': (1, 0), '5': (1, 1), '6': (1, 2),
    '1': (2, 0), '2': (2, 1), '3': (2, 2),
                 '0': (3, 1), 'A': (3, 2),
}
dirpad = {
                 '^': (0, 1), 'A': (0, 2),
    '<': (1, 0), 'v': (1, 1), '>': (1, 2),
}

def create_graph(keypad, invalid_coords):
    graph = {}
    for a, (x1, y1) in keypad.items():
        for b, (x2, y2) in keypad.items():
            path = '<' * (y1 - y2) +  'v' * (x2 - x1) + '^' * (x1 - x2) + '>' * (y2 - y1)
            if invalid_coords == (x1, y2) or invalid_coords == (x2, y1):
                path = path[::-1]
            graph[(a, b)] = path + 'A'
    return graph

numpad_graph = create_graph(numpad, (3, 0))
dirpad_graph = create_graph(dirpad, (0, 0))

# print(numpad_graph)
# {
#     ('7', '7'): 'A', ('7', '8'): '>A', ('7', '9'): '>>A', ('7', '4'): 'vA', ('7', '5'): 'v>A', ('7', '6'): 'v>>A', ('7', '1'): 'vvA', ('7', '2'): 'vv>A', ('7', '3'): 'vv>>A', ('7', '0'): '>vvvA', ('7', 'A'): '>>vvvA', 
#     ('8', '7'): '<A', ('8', '8'): 'A', ('8', '9'): '>A', ('8', '4'): '<vA', ('8', '5'): 'vA', ('8', '6'): 'v>A', ('8', '1'): '<vvA', ('8', '2'): 'vvA', ('8', '3'): 'vv>A', ('8', '0'): 'vvvA', ('8', 'A'): 'vvv>A', 
#     ('9', '7'): '<<A', ('9', '8'): '<A', ('9', '9'): 'A', ('9', '4'): '<<vA', ('9', '5'): '<vA', ('9', '6'): 'vA', ('9', '1'): '<<vvA', ('9', '2'): '<vvA', ('9', '3'): 'vvA', ('9', '0'): '<vvvA', ('9', 'A'): 'vvvA', 
#     ('4', '7'): '^A', ('4', '8'): '^>A', ('4', '9'): '^>>A', ('4', '4'): 'A', ('4', '5'): '>A', ('4', '6'): '>>A', ('4', '1'): 'vA', ('4', '2'): 'v>A', ('4', '3'): 'v>>A', ('4', '0'): '>vvA', ('4', 'A'): '>>vvA', 
#     ('5', '7'): '<^A', ('5', '8'): '^A', ('5', '9'): '^>A', ('5', '4'): '<A', ('5', '5'): 'A', ('5', '6'): '>A', ('5', '1'): '<vA', ('5', '2'): 'vA', ('5', '3'): 'v>A', ('5', '0'): 'vvA', ('5', 'A'): 'vv>A', 
#     ('6', '7'): '<<^A', ('6', '8'): '<^A', ('6', '9'): '^A', ('6', '4'): '<<A', ('6', '5'): '<A', ('6', '6'): 'A', ('6', '1'): '<<vA', ('6', '2'): '<vA', ('6', '3'): 'vA', ('6', '0'): '<vvA', ('6', 'A'): 'vvA', 
#     ('1', '7'): '^^A', ('1', '8'): '^^>A', ('1', '9'): '^^>>A', ('1', '4'): '^A', ('1', '5'): '^>A', ('1', '6'): '^>>A', ('1', '1'): 'A', ('1', '2'): '>A', ('1', '3'): '>>A', ('1', '0'): '>vA', ('1', 'A'): '>>vA', 
#     ('2', '7'): '<^^A', ('2', '8'): '^^A', ('2', '9'): '^^>A', ('2', '4'): '<^A', ('2', '5'): '^A', ('2', '6'): '^>A', ('2', '1'): '<A', ('2', '2'): 'A', ('2', '3'): '>A', ('2', '0'): 'vA', ('2', 'A'): 'v>A', 
#     ('3', '7'): '<<^^A', ('3', '8'): '<^^A', ('3', '9'): '^^A', ('3', '4'): '<<^A', ('3', '5'): '<^A', ('3', '6'): '^A', ('3', '1'): '<<A', ('3', '2'): '<A', ('3', '3'): 'A', ('3', '0'): '<vA', ('3', 'A'): 'vA', 
#     ('0', '7'): '^^^<A', ('0', '8'): '^^^A', ('0', '9'): '^^^>A', ('0', '4'): '^^<A', ('0', '5'): '^^A', ('0', '6'): '^^>A', ('0', '1'): '^<A', ('0', '2'): '^A', ('0', '3'): '^>A', ('0', '0'): 'A', ('0', 'A'): '>A', 
#     ('A', '7'): '^^^<<A', ('A', '8'): '<^^^A', ('A', '9'): '^^^A', ('A', '4'): '^^<<A', ('A', '5'): '<^^A', ('A', '6'): '^^A', ('A', '1'): '^<<A', ('A', '2'): '<^A', ('A', '3'): '^A', ('A', '0'): '<A', ('A', 'A'): 'A'
# }

# print(dirpad_graph)
# {
#     ('^', '^'): 'A', ('^', 'A'): '>A', ('^', '<'): 'v<A', ('^', 'v'): 'vA', ('^', '>'): 'v>A', ('A', '^'): '<A', ('A', 'A'): 'A', 
#     ('A', '<'): 'v<<A', ('A', 'v'): '<vA', ('A', '>'): 'vA', ('<', '^'): '>^A', ('<', 'A'): '>>^A', ('<', '<'): 'A', ('<', 'v'): '>A', 
#     ('<', '>'): '>>A', ('v', '^'): '^A', ('v', 'A'): '^>A', ('v', '<'): '<A', ('v', 'v'): 'A', ('v', '>'): '>A', ('>', '^'): '<^A', 
#     ('>', 'A'): '^A', ('>', '<'): '<<A', ('>', 'v'): '<A', ('>', '>'): 'A'
# }

@cache
def get_length(sequence, iterations, first_iter=False) -> int:
    if iterations == 0: 
        return len(sequence)
    prev = 'A'
    total_length = 0
    graph = numpad_graph if first_iter else dirpad_graph
    for char in sequence:
        total_length += get_length(graph[(prev, char)], iterations - 1) 
        prev = char
    return total_length

with open(file_path) as f:
    data = f.read()

total_complexity = 0
for button_presses in data.split('\n'):
    total_complexity += int(button_presses[:-1]) * get_length(button_presses, 26, True)

print(f"Part 1: {total_complexity}")
